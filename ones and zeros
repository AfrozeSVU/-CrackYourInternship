class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        // Initialize a DP table with dimensions (m+1) x (n+1)
        int[][] dp = new int[m + 1][n + 1];
        
        // Iterate over each string in the array
        for (String str : strs) {
            // Count the number of zeros and ones in the current string
            int zeros = 0, ones = 0;
            for (char c : str.toCharArray()) {
                if (c == '0') zeros++;
                else ones++;
            }
            
            // Update the DP table in reverse order
            for (int i = m; i >= zeros; i--) {
                for (int j = n; j >= ones; j--) {
                    // Update the DP value for dp[i][j]
                    dp[i][j] = Math.max(dp[i][j], 1 + dp[i - zeros][j - ones]);
                }
            }
        }
        
        // The answer is in dp[m][n], the maximum size of the subset
        return dp[m][n];
    }
}
