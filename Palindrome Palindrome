import java.util.*;

class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> result = new ArrayList<>();
        if (words == null || words.length < 2) return result;
        
        // Create a map to store words and their corresponding indices.
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        
        // Iterate through each word in the array.
        for (int i = 0; i < words.length; i++) {
            String currentWord = words[i];
            int n = currentWord.length();
            
            for (int j = 0; j <= n; j++) {
                String prefix = currentWord.substring(0, j);
                String suffix = currentWord.substring(j);
                
                // If the prefix is a palindrome, check if the reverse of the suffix exists in the map.
                if (isPalindrome(prefix)) {
                    String reversedSuffix = new StringBuilder(suffix).reverse().toString();
                    if (map.containsKey(reversedSuffix) && map.get(reversedSuffix) != i) {
                        result.add(Arrays.asList(map.get(reversedSuffix), i));
                    }
                }
                
                // If the suffix is a palindrome, check if the reverse of the prefix exists in the map.
                if (isPalindrome(suffix) && j != n) { // check j != n to avoid duplicates
                    String reversedPrefix = new StringBuilder(prefix).reverse().toString();
                    if (map.containsKey(reversedPrefix) && map.get(reversedPrefix) != i) {
                        result.add(Arrays.asList(i, map.get(reversedPrefix)));
                    }
                }
            }
        }
        
        return result;
    }
    
    // Helper method to check if a given string is a palindrome.
    private boolean isPalindrome(String s) {
        int left = 0, right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
