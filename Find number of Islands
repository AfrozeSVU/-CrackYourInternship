  private final int[] rowDirection = {-1, 1, 0, 0, -1, -1, 1, 1};
    private final int[] colDirection = {0, 0, -1, 1, -1, 1, -1, 1};

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }

        int numIslands = 0;
        int rows = grid.length;
        int cols = grid[0].length;

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (grid[row][col] == '1') {
                    numIslands++;
                    dfs(grid, row, col);
                }
            }
        }

        return numIslands;
    }

    private void dfs(char[][] grid, int row, int col) {
        int rows = grid.length;
        int cols = grid[0].length;

        if (row < 0 || row >= rows || col < 0 || col >= cols || grid[row][col] != '1') {
            return;
        }

        grid[row][col] = '0'; // Mark the cell as visited

        // Explore all 8 possible directions
        for (int k = 0; k < 8; k++) {
            dfs(grid, row + rowDirection[k], col + colDirection[k]);
        }
