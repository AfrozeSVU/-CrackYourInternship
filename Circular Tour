class Solution {
    // Function to return a list containing the bottom view of the given tree.
    public ArrayList<Integer> bottomView(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) {
            return result;
        }

        // TreeMap to store the horizontal distance and the corresponding node's value
        TreeMap<Integer, Integer> map = new TreeMap<>();
        // Queue to store nodes along with their horizontal distance
        Queue<Node> queue = new LinkedList<>();

        // Initialize the horizontal distance of root as 0
        root.hd = 0;
        queue.add(root);

        // Level order traversal (BFS)
        while (!queue.isEmpty()) {
            Node temp = queue.poll();

            // Update the map with the horizontal distance of the current node
            map.put(temp.hd, temp.data);

            // If there is a left child, add it to the queue with horizontal distance hd - 1
            if (temp.left != null) {
                temp.left.hd = temp.hd - 1;
                queue.add(temp.left);
            }

            // If there is a right child, add it to the queue with horizontal distance hd + 1
            if (temp.right != null) {
                temp.right.hd = temp.hd + 1;
                queue.add(temp.right);
            }
        }

        // Extracting the bottom view from the map
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            result.add(entry.getValue());
        }

        return result;
    }}
