 

class Solution {
    public int maxDistance(int[][] grid) {
        int n = grid.length;
        Queue<int[]> queue = new LinkedList<>();
        
        // Add all land cells to the queue
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    queue.offer(new int[]{i, j});
                }
            }
        }
        
        // If there is no water or no land, return -1
        if (queue.isEmpty() || queue.size() == n * n) {
            return -1;
        }
        
        int[] directions = {-1, 0, 1, 0, -1};
        int maxDistance = -1;
        
        // BFS from all land cells
        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int x = current[0];
            int y = current[1];
            
            // Explore 4 possible directions
            for (int d = 0; d < 4; d++) {
                int nx = x + directions[d];
                int ny = y + directions[d + 1];
                
                // If the new cell is within bounds and is water
                if (nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] == 0) {
                    // Mark it as visited by converting it to land (set to 1)
                    grid[nx][ny] = grid[x][y] + 1; // Marking distance
                    maxDistance = Math.max(maxDistance, grid[nx][ny] - 1);
                    queue.offer(new int[]{nx, ny});
                }
            }
        }
        
        return maxDistance;
    }
}
