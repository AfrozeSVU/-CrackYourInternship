import java.util.*;

class Solution {
    public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
        // Create an adjacency list to represent the tree
        List<List<Integer>> tree = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            tree.add(new ArrayList<>());
        }
        
        // Fill the adjacency list with subordinates
        for (int i = 0; i < n; i++) {
            if (manager[i] != -1) {
                tree.get(manager[i]).add(i);
            }
        }
        
        // Perform DFS to find the maximum time to inform all employees
        return dfs(tree, headID, informTime);
    }
    
    private int dfs(List<List<Integer>> tree, int currentNode, int[] informTime) {
        // If the current node has no subordinates, return 0
        if (tree.get(currentNode).isEmpty()) {
            return 0;
        }
        
        int maxTime = 0;
        // Traverse all subordinates of the current node
        for (int subordinate : tree.get(currentNode)) {
            int time = dfs(tree, subordinate, informTime);
            maxTime = Math.max(maxTime, time);
        }
        
        // The total time is the time to inform current node's subordinates plus the inform time of the current node
        return maxTime + informTime[currentNode];
    }
}
