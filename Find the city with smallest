import java.util.Arrays;

class Solution {
    public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        // Initialize the distance matrix
        int[][] dist = new int[n][n];
        int INF = 100000000; // Use a large number to represent infinity
        
        for (int i = 0; i < n; i++) {
            Arrays.fill(dist[i], INF);
            dist[i][i] = 0; // Distance to itself is 0
        }
        
        // Fill the distances for the direct connections from the edges
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];
            dist[u][v] = w;
            dist[v][u] = w;
        }
        
        // Apply Floyd-Warshall Algorithm
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }
        
        // Find the city with the smallest number of reachable cities within the distance threshold
        int minReachableCities = n;
        int cityWithMinReachableCities = -1;
        
        for (int i = 0; i < n; i++) {
            int reachableCities = 0;
            for (int j = 0; j < n; j++) {
                if (i != j && dist[i][j] <= distanceThreshold) {
                    reachableCities++;
                }
            }
            
            if (reachableCities < minReachableCities || 
                (reachableCities == minReachableCities && i > cityWithMinReachableCities)) {
                minReachableCities = reachableCities;
                cityWithMinReachableCities = i;
            }
        }
        
        return cityWithMinReachableCities;
    }
}
