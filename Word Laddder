 

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet<>(wordList);
        if (!wordSet.contains(endWord)) {
            return 0;  // If endWord is not in wordList, there's no valid transformation sequence
        }

        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        int level = 1;  // Start at level 1 with beginWord

        while (!queue.isEmpty()) {
            int size = queue.size();

            // Process all nodes (words) at the current level
            for (int i = 0; i < size; i++) {
                String currentWord = queue.poll();

                // Try all possible transformations
                for (int j = 0; j < currentWord.length(); j++) {
                    char[] wordChars = currentWord.toCharArray();

                    for (char c = 'a'; c <= 'z'; c++) {
                        wordChars[j] = c;
                        String transformedWord = new String(wordChars);

                        if (transformedWord.equals(endWord)) {
                            return level + 1;  // Return the length of the shortest path
                        }

                        if (wordSet.contains(transformedWord)) {
                            queue.offer(transformedWord);
                            wordSet.remove(transformedWord);  // Mark this word as visited
                        }
                    }
                }
            }

            level++;
        }

        return 0;  // No transformation sequence found
    }
}
