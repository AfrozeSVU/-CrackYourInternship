 

class WordDictionary {
    // TrieNode class
    private class TrieNode {
        Map<Character, TrieNode> children;
        boolean isWord;
        
        public TrieNode() {
            children = new HashMap<>();
            isWord = false;
        }
    }
    
    private TrieNode root;
    
    // Initialize your data structure here.
    public WordDictionary() {
        root = new TrieNode();
    }
    
    // Adds a word into the data structure.
    public void addWord(String word) {
        TrieNode node = root;
        for (char ch : word.toCharArray()) {
            node.children.putIfAbsent(ch, new TrieNode());
            node = node.children.get(ch);
        }
        node.isWord = true;
    }
    
    // Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
    public boolean search(String word) {
        return searchInNode(word, root);
    }
    
    private boolean searchInNode(String word, TrieNode node) {
        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);
            
            if (ch == '.') {
                // If the character is '.', check all possible nodes at this level.
                for (TrieNode child : node.children.values()) {
                    if (searchInNode(word.substring(i + 1), child)) {
                        return true;
                    }
                }
                return false; // If no nodes match, return false.
            } else {
                // If the character is not found, return false.
                if (!node.children.containsKey(ch)) {
                    return false;
                }
                // Move to the next node in the path.
                node = node.children.get(ch);
            }
        }
        // After processing all characters, return whether the current node marks the end of a word.
        return node.isWord;
    }
}

 
